{"remainingRequest":"/home/jaiden/Code/JaID-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jaiden/Code/JaID-Vue/src/components/VueItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jaiden/Code/JaID-Vue/src/components/VueItem.vue","mtime":1551972680227},{"path":"/home/jaiden/Code/JaID-Vue/node_modules/cache-loader/dist/cjs.js","mtime":1539307301811},{"path":"/home/jaiden/Code/JaID-Vue/node_modules/babel-loader/lib/index.js","mtime":1541744734350},{"path":"/home/jaiden/Code/JaID-Vue/node_modules/cache-loader/dist/cjs.js","mtime":1539307301811},{"path":"/home/jaiden/Code/JaID-Vue/node_modules/vue-loader/lib/index.js","mtime":1541744744501}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport jQuery from \"jquery\";\nimport Slick from \"vue-slick\";\n\nexport default {\n\n    name: \"VueItem\",\n\n    components: { Slick },\n\n    mounted: function() {\n\n        $(\".carousel-container\").slick({\n            // setting-name: setting-value\n            arrows: true,\n            dots: true,\n            cssEase: \"ease-out\",\n            speed: 200,\n            useTransform: true,\n        });\n\n        // Button Selecting:\n\n        // When .button is clicked,\n        $(\".button\").click(function () {\n\n            // Find the other .buttons within this parent and remove .selected\n            $(this)\n                .parent()\n                .find(\".button\")\n                .not(this)\n                .removeClass(\"selected\");\n\n            if ($(this).parent().hasClass(\"colors\")) {\n\n                // Get the button's custom data-pic attribute\n                let pic = $(this).data(\"pic\");\n\n                // Change the main image source to the one from data-pic\n                $(\"#main-image\").attr(\"src\", pic);\n            }\n\n              // Toggle .active for the button clicked\n              $(this).toggleClass(\"selected\");\n          });\n\n          // Quantity Counter\n          jQuery(document).ready(function () {\n\n            // This button will increment the value\n            $(\".qtyplus\").click(function (e) {\n\n                // Stop acting like a button\n                e.preventDefault();\n\n                // Get the field name\n                let fieldName = $(this).attr(\"field\");\n\n                // Get its current value\n                var currentVal = parseInt($(\"input[name=\" + fieldName + \"]\").val());\n\n                // If is not undefined\n                if (!isNaN(currentVal)) {\n                    // Increment\n                    $(\"input[name=\" + fieldName + \"]\").val(currentVal + 1);\n\n                } else {\n\n                    // Otherwise put a 0 there\n                    $(\"input[name=\" + fieldName + \"]\").val(0);\n                }\n            });\n\n            // This button will decrement the value till 0\n            $(\".qtyminus\").click(function (e) {\n\n                // Stop acting like a button\n                e.preventDefault();\n\n                // Get the field name\n                let fieldName = $(this).attr(\"field\");\n\n                // Get its current value\n                var currentVal = parseInt($(\"input[name=\" + fieldName + \"]\").val());\n\n                // If it isn't undefined or its greater than 0\n                if (!isNaN(currentVal) && currentVal > 0) {\n\n                    // Decrement one\n                    $(\"input[name=\" + fieldName + \"]\").val(currentVal - 1);\n                } else {\n\n                    // Otherwise put a 0 there\n                    $(\"input[name=\" + fieldName + \"]\").val(0);\n                }\n            });\n\n\n            // To be called when the page loads and when adding to / removing from cart\n            function setCartButton() {\n\n                // Define cart string\n                let cart = localStorage.getItem(\"Cart\")\n\n                // Find name of product on page\n                let title = $(document).find(\".product-name\").text()\n\n                let button = $(\".add-to-cart-button\")\n\n                // If product name is in cart\n                if (cart.includes(title)) {\n\n                    button\n                        .addClass(\"in-cart\")\n                        .addClass(\"selected\")\n\n                    button\n                        .find(\"h2\")\n                        .html(\"Remove from Cart\")\n\n                } else {\n\n                    button\n                        .removeClass(\"in-cart\")\n                        .removeClass(\"selected\")\n\n                    button\n                        .find(\"h2\")\n                        .html(\"Add to Cart\")\n                }\n            }\n\n            setCartButton()\n\n            function setCartBadge() {\n                let badge = $(\".button-badge\")\n                badge.html($(\".cart-entry\").length)\n            }\n\n            // Fill the cart menu with carted items\n            function fillCart() {\n\n                $(\".cart-entry\").remove();\n\n                // Locate cart side menu for adding divs (carted items)\n                let cartDiv = $(\"#cart\")\n\n                // Get cart contents form localStorage, convert to object\n                let cart = localStorage.getItem(\"Cart\")\n                let cartObject = JSON.parse(cart)\n\n                // For carted item...\n                for (var i = 0; i < cartObject.length; i++) {\n\n                    // Create variable out of carted item\n                    let entry = cartObject[i]\n\n                    // For detail in carted item... (title, price, etc)\n                    for (var j = 0; j < entry.length; j++) {\n\n                        //  Create variable out of detail\n                        let detail = entry[j]\n\n                        // Pull cart details for injecting into HTML\n                        let entryTitle = detail[\"Title\"]\n                        let entryPrice = detail[\"Price\"]\n                        let entryImage = detail[\"Image\"]\n                        let entryAmount = detail[\"Amount\"]\n\n                        function createCartEntry() {\n\n                          // create overall container div for a cart entry\n                          let container = document.createElement(\"div\")\n                          container.classList.add(\"option\", \"cart-entry\")\n\n\n\n                          // PRIMARY CHILD DIV | shows image and title of item\n\n                              let faceplate = document.createElement(\"div\")\n                              faceplate.classList.add(\"faceplate\")\n\n                              // create + prepend image element\n                              let image = document.createElement(\"img\")\n                              $(image).attr('src', entryImage)\n                              faceplate.prepend(image)\n\n                              // create + append title element\n                              let titleH3 = document.createElement(\"h3\")\n                              let titleContent = document.createTextNode(entryTitle)\n                              titleH3.appendChild(titleContent)\n                              titleH3.classList.add(\"item-title\")\n                              faceplate.append(titleH3)\n\n                              // create + append dropdown arrow\n                              let arrow = document.createElement(\"i\")\n                              arrow.classList.add(\"fas\", \"fa-caret-down\")\n                              faceplate.append(arrow)\n\n\n\n                          // DROPDOWN CONTAINER\n\n                              // create droptions-container div, append to container\n                              let droptionsContainer = document.createElement(\"div\")\n                              droptionsContainer.classList.add(\"droptions-container\")\n                              container.append(droptionsContainer)\n\n\n\n                          // DROPDOWN CHILDREN | shows item info (price, quantity), link to item, button to remove item\n\n                              // create option/info divs: price, quantity, link to item, and remove button\n                              let outerPriceDiv = document.createElement(\"div\")\n                              let outerAmountDiv = document.createElement(\"div\")\n                              let outerRemoveDiv = document.createElement(\"div\")\n\n                              // add option class to each of the 4 divs created above\n                              outerPriceDiv.classList.add(\"option\")\n                              outerAmountDiv.classList.add(\"option\")\n                              outerRemoveDiv.classList.add(\"option\")\n\n                              // append each of the 4 divs to the droptions-container div\n                              droptionsContainer.append(outerPriceDiv)\n                              droptionsContainer.append(outerAmountDiv)\n                              droptionsContainer.append(outerRemoveDiv)\n\n\n\n                              // DROPDOWN CHILDREN CONTENTS\n\n                                  // create div for showing pricing\n                                  let innerPriceDiv = document.createElement(\"div\")\n                                  innerPriceDiv.classList.add(\"faceplate\", \"noclick\")\n                                  outerPriceDiv.appendChild(innerPriceDiv)\n\n                                      // create price label\n                                      let priceIndicator = document.createElement(\"h3\")\n                                      let priceIndicatorContent = document.createTextNode(\"Price\")\n                                      priceIndicator.appendChild(priceIndicatorContent)\n                                      innerPriceDiv.prepend(priceIndicator)\n\n                                      // create h3 with actual price value\n                                      let priceValue = document.createElement(\"h3\")\n                                      let priceValueContent = document.createTextNode(entryPrice)\n                                      priceValue.appendChild(priceValueContent)\n                                      innerPriceDiv.append(priceValue)\n\n                                  // create div for showing quantity in cart\n                                  let innerAmountDiv = document.createElement(\"div\")\n                                  innerAmountDiv.classList.add(\"faceplate\", \"noclick\")\n                                  outerAmountDiv.appendChild(innerAmountDiv)\n\n                                      // create quantity label\n                                      let amountIndicator = document.createElement(\"h3\")\n                                      let amountIndicatorContent = document.createTextNode(\"Quantity\")\n                                      amountIndicator.appendChild(amountIndicatorContent)\n                                      innerAmountDiv.prepend(amountIndicator)\n\n                                      // create h3 with actual price value\n                                      let amountValue = document.createElement(\"h3\")\n                                      let amountValueContent = document.createTextNode(entryAmount)\n                                      amountValue.appendChild(amountValueContent)\n                                      innerAmountDiv.append(amountValue)\n\n                                  // create div for removing item\n                                  let innerRemoveDiv = document.createElement(\"div\")\n                                  innerRemoveDiv.classList.add(\"faceplate\", \"red\")\n                                  outerRemoveDiv.appendChild(innerRemoveDiv)\n\n                                      // create removal \"button\"\n                                      let itemRemove = document.createElement(\"h3\")\n                                      let itemRemoveContent = document.createTextNode(\"Remove\")\n                                      itemRemove.appendChild(itemRemoveContent)\n                                      innerRemoveDiv.prepend(itemRemove)\n\n                                      let itemRemoveIcon = document.createElement(\"i\")\n                                      itemRemoveIcon.classList.add(\"fas\", \"fa-times\")\n                                      innerRemoveDiv.append(itemRemoveIcon)\n\n\n\n                          // Put the faceplate containing the image, text and arrow into container\n                          container.prepend(faceplate)\n\n                          // Put the container into the cart div for displaying on page\n                          cartDiv.append(container)\n\n                          $(container).click(function() {\n                              // Find droptions-container child of option\n                              let droptionsContainer = $(this).children(\".droptions-container\");\n\n                              // Find the dropdown-container children of sibling options\n                              let siblings = $(this).siblings().children(\".droptions-container\");\n\n                              // give display: visible to slider, done with sliding animation\n                              droptionsContainer.slideToggle(200);\n\n                              siblings.slideUp(200);\n                          })\n\n                          $(\".option .red\").click(function() {\n                              let cartItemTitle = $(this).parent().parent().siblings(\".faceplate\").children(\"h3\").text()\n                              removeCartItem(cartItemTitle)\n                          })\n\n                        }\n\n                        createCartEntry()\n                        setCartBadge()\n                    }\n                }\n            }\n\n            function removeCartItem(insert) {\n\n                // Get cart contents form localStorage, convert to object\n                let cart = localStorage.getItem(\"Cart\")\n                let cartObject = JSON.parse(cart)\n\n                for ( var product = 0; product < cartObject.length; product++ ) {\n                    let individualItem = cartObject[product]\n                    let itemIndex = cartObject.indexOf(individualItem)\n                    \n                    for ( var feature = 0; feature < individualItem.length; feature++) {\n                        let detail = individualItem[feature]\n                        let title = detail[\"Title\"]\n\n                        if (title === insert) {\n                          cartObject.splice(itemIndex, 1)\n                          let cartString = JSON.stringify(cartObject)\n                          localStorage.setItem(\"Cart\", cartString)\n                          fillCart()\n                        }\n                    }\n                }\n                setCartBadge()\n                setCartButton()\n            }\n\n            // Add to cart (using Web Storage API)\n            $(\".add-to-cart-button\").click(function () {\n\n                function getQuantityValue() {\n                    return $(document).find(\".qty\").val()\n                };\n\n                // Get relevant item data\n                let itemTitle = $(this).closest(\".panel\").data(\"title\")\n                let itemPrice = $(this).closest(\".panel\").data(\"price\")\n                let itemImage = $(this).closest(\".panel\").data(\"image\")\n                let itemQuantity = getQuantityValue()\n\n                if (! $(this).hasClass(\"in-cart\")) {\n\n                    // Create Object out of item data\n                    let cartEntry = [{\n                        \"Title\": itemTitle,\n                        \"Price\": itemPrice,\n                        \"Image\": itemImage,\n                        \"Amount\": itemQuantity\n                    }]\n\n                    // Fetch cart from localStorage, convert to object\n                    let cart = localStorage.getItem(\"Cart\")\n                    let cartObject = JSON.parse(cart)\n\n                    cartObject.push(cartEntry)\n\n                    // Convert cart back to string & send back to localStorage\n                    let newCart = JSON.stringify(cartObject)\n                    localStorage.setItem(\"Cart\", newCart)\n\n                    fillCart()\n                    setCartButton()\n                } else if ($(this).hasClass(\"in-cart\")){\n                    removeCartItem(itemTitle)\n                    setCartButton()\n                }\n\n            })\n        });\n    }\n};\n\n",{"version":3,"sources":["VueItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"VueItem.vue","sourceRoot":"src/components","sourcesContent":["// To do\n// \n// Change more than just 1 image when color is chosen\n// Allow image changes when more than 1 image is held in the selected color\n\n<template>\n  <div id=\"thing\">\n    <div v-for=\"category in this.$store.state.catelogue.categories\" v-if=\"category.name === $route.params.categoryName\" :key=\"category\">\n      <div v-for=\"item in category.items\" v-if=\"item.title === $route.params.itemTitle\" :key=\"item.title\">\n\n        <div class=\"carousel-wrapper\">\n\n          <div class=\"carousel-container\">\n            <div class=\"image-container\">\n              <img :src=\"item.mainImage\" id=\"main-image\"/>\n            </div>\n\n            <div v-for=\"image in item.images\" v-if=\"item.title === $route.params.itemTitle\" :key=\"image\" class=\"image-container\">\n              <img :src=\"image\"/>\n            </div>\n          </div>\n\n          <div class=\"panel-container\">\n            <div class=\"panel\"\n                  :data-title=\"item.title\"\n                  :data-price=\"item.price\"\n                  :data-image=\"item.mainImage\">\n              <h1 class=\"product-name\">{{ item.title }}</h1>\n              <h3 class=\"product-price\">{{ item.price }}</h3>\n\n              <div v-if=\"item.colors.length > 0\" class=\"colors\">\n                <template v-for=\"color in item.colors\">\n                  <button v-for=\"(key, value) in color\" class=\"button\" :data-pic=\"key\" :key=\"key\">\n                    <h2>{{ value }}</h2>\n                  </button>\n                </template>\n              </div>\n              <div v-else=\"\" class=\"colors\">\n                <h3>There are no color options for this item. </h3>\n              </div>\n\n              <div v-if=\"item.sizes.length > 0\" class=\"sizes\">\n                <template v-for=\"size in item.sizes\">\n                  <button class=\"button\" :key=\"size\">\n                    <h2>{{ size }}</h2>\n                  </button>\n                </template>\n              </div>\n              <div v-else=\"\" class=\"sizes\">\n                <h3>There are no size options for this item. </h3>\n              </div>\n\n              <form class=\"quantity\" id=\"counter-form\" action=\"#\" method=\"POST\">\n                <button class=\"qty-button qtyminus\" field=\"quantity\">-</button>\n                <input class=\"qty\" tpye=\"number\" name=\"quantity\" value=\"1\"/>\n                <button class=\"qty-button qtyplus\" field=\"quantity\">+</button>\n              </form>\n              <div class=\"add-to-cart-container\">\n                <button class=\"button add-to-cart-button\"> \n                  <h2>Add to Cart</h2>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"description-wrapper\">\n          <div class=\"description-header\">\n            <h1>Time to walk on clouds. </h1>\n          </div>\n          <div class=\"description-body\">\n            <p>{{ item.description }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport jQuery from \"jquery\";\nimport Slick from \"vue-slick\";\n\nexport default {\n\n    name: \"VueItem\",\n\n    components: { Slick },\n\n    mounted: function() {\n\n        $(\".carousel-container\").slick({\n            // setting-name: setting-value\n            arrows: true,\n            dots: true,\n            cssEase: \"ease-out\",\n            speed: 200,\n            useTransform: true,\n        });\n\n        // Button Selecting:\n\n        // When .button is clicked,\n        $(\".button\").click(function () {\n\n            // Find the other .buttons within this parent and remove .selected\n            $(this)\n                .parent()\n                .find(\".button\")\n                .not(this)\n                .removeClass(\"selected\");\n\n            if ($(this).parent().hasClass(\"colors\")) {\n\n                // Get the button's custom data-pic attribute\n                let pic = $(this).data(\"pic\");\n\n                // Change the main image source to the one from data-pic\n                $(\"#main-image\").attr(\"src\", pic);\n            }\n\n              // Toggle .active for the button clicked\n              $(this).toggleClass(\"selected\");\n          });\n\n          // Quantity Counter\n          jQuery(document).ready(function () {\n\n            // This button will increment the value\n            $(\".qtyplus\").click(function (e) {\n\n                // Stop acting like a button\n                e.preventDefault();\n\n                // Get the field name\n                let fieldName = $(this).attr(\"field\");\n\n                // Get its current value\n                var currentVal = parseInt($(\"input[name=\" + fieldName + \"]\").val());\n\n                // If is not undefined\n                if (!isNaN(currentVal)) {\n                    // Increment\n                    $(\"input[name=\" + fieldName + \"]\").val(currentVal + 1);\n\n                } else {\n\n                    // Otherwise put a 0 there\n                    $(\"input[name=\" + fieldName + \"]\").val(0);\n                }\n            });\n\n            // This button will decrement the value till 0\n            $(\".qtyminus\").click(function (e) {\n\n                // Stop acting like a button\n                e.preventDefault();\n\n                // Get the field name\n                let fieldName = $(this).attr(\"field\");\n\n                // Get its current value\n                var currentVal = parseInt($(\"input[name=\" + fieldName + \"]\").val());\n\n                // If it isn't undefined or its greater than 0\n                if (!isNaN(currentVal) && currentVal > 0) {\n\n                    // Decrement one\n                    $(\"input[name=\" + fieldName + \"]\").val(currentVal - 1);\n                } else {\n\n                    // Otherwise put a 0 there\n                    $(\"input[name=\" + fieldName + \"]\").val(0);\n                }\n            });\n\n\n            // To be called when the page loads and when adding to / removing from cart\n            function setCartButton() {\n\n                // Define cart string\n                let cart = localStorage.getItem(\"Cart\")\n\n                // Find name of product on page\n                let title = $(document).find(\".product-name\").text()\n\n                let button = $(\".add-to-cart-button\")\n\n                // If product name is in cart\n                if (cart.includes(title)) {\n\n                    button\n                        .addClass(\"in-cart\")\n                        .addClass(\"selected\")\n\n                    button\n                        .find(\"h2\")\n                        .html(\"Remove from Cart\")\n\n                } else {\n\n                    button\n                        .removeClass(\"in-cart\")\n                        .removeClass(\"selected\")\n\n                    button\n                        .find(\"h2\")\n                        .html(\"Add to Cart\")\n                }\n            }\n\n            setCartButton()\n\n            function setCartBadge() {\n                let badge = $(\".button-badge\")\n                badge.html($(\".cart-entry\").length)\n            }\n\n            // Fill the cart menu with carted items\n            function fillCart() {\n\n                $(\".cart-entry\").remove();\n\n                // Locate cart side menu for adding divs (carted items)\n                let cartDiv = $(\"#cart\")\n\n                // Get cart contents form localStorage, convert to object\n                let cart = localStorage.getItem(\"Cart\")\n                let cartObject = JSON.parse(cart)\n\n                // For carted item...\n                for (var i = 0; i < cartObject.length; i++) {\n\n                    // Create variable out of carted item\n                    let entry = cartObject[i]\n\n                    // For detail in carted item... (title, price, etc)\n                    for (var j = 0; j < entry.length; j++) {\n\n                        //  Create variable out of detail\n                        let detail = entry[j]\n\n                        // Pull cart details for injecting into HTML\n                        let entryTitle = detail[\"Title\"]\n                        let entryPrice = detail[\"Price\"]\n                        let entryImage = detail[\"Image\"]\n                        let entryAmount = detail[\"Amount\"]\n\n                        function createCartEntry() {\n\n                          // create overall container div for a cart entry\n                          let container = document.createElement(\"div\")\n                          container.classList.add(\"option\", \"cart-entry\")\n\n\n\n                          // PRIMARY CHILD DIV | shows image and title of item\n\n                              let faceplate = document.createElement(\"div\")\n                              faceplate.classList.add(\"faceplate\")\n\n                              // create + prepend image element\n                              let image = document.createElement(\"img\")\n                              $(image).attr('src', entryImage)\n                              faceplate.prepend(image)\n\n                              // create + append title element\n                              let titleH3 = document.createElement(\"h3\")\n                              let titleContent = document.createTextNode(entryTitle)\n                              titleH3.appendChild(titleContent)\n                              titleH3.classList.add(\"item-title\")\n                              faceplate.append(titleH3)\n\n                              // create + append dropdown arrow\n                              let arrow = document.createElement(\"i\")\n                              arrow.classList.add(\"fas\", \"fa-caret-down\")\n                              faceplate.append(arrow)\n\n\n\n                          // DROPDOWN CONTAINER\n\n                              // create droptions-container div, append to container\n                              let droptionsContainer = document.createElement(\"div\")\n                              droptionsContainer.classList.add(\"droptions-container\")\n                              container.append(droptionsContainer)\n\n\n\n                          // DROPDOWN CHILDREN | shows item info (price, quantity), link to item, button to remove item\n\n                              // create option/info divs: price, quantity, link to item, and remove button\n                              let outerPriceDiv = document.createElement(\"div\")\n                              let outerAmountDiv = document.createElement(\"div\")\n                              let outerRemoveDiv = document.createElement(\"div\")\n\n                              // add option class to each of the 4 divs created above\n                              outerPriceDiv.classList.add(\"option\")\n                              outerAmountDiv.classList.add(\"option\")\n                              outerRemoveDiv.classList.add(\"option\")\n\n                              // append each of the 4 divs to the droptions-container div\n                              droptionsContainer.append(outerPriceDiv)\n                              droptionsContainer.append(outerAmountDiv)\n                              droptionsContainer.append(outerRemoveDiv)\n\n\n\n                              // DROPDOWN CHILDREN CONTENTS\n\n                                  // create div for showing pricing\n                                  let innerPriceDiv = document.createElement(\"div\")\n                                  innerPriceDiv.classList.add(\"faceplate\", \"noclick\")\n                                  outerPriceDiv.appendChild(innerPriceDiv)\n\n                                      // create price label\n                                      let priceIndicator = document.createElement(\"h3\")\n                                      let priceIndicatorContent = document.createTextNode(\"Price\")\n                                      priceIndicator.appendChild(priceIndicatorContent)\n                                      innerPriceDiv.prepend(priceIndicator)\n\n                                      // create h3 with actual price value\n                                      let priceValue = document.createElement(\"h3\")\n                                      let priceValueContent = document.createTextNode(entryPrice)\n                                      priceValue.appendChild(priceValueContent)\n                                      innerPriceDiv.append(priceValue)\n\n                                  // create div for showing quantity in cart\n                                  let innerAmountDiv = document.createElement(\"div\")\n                                  innerAmountDiv.classList.add(\"faceplate\", \"noclick\")\n                                  outerAmountDiv.appendChild(innerAmountDiv)\n\n                                      // create quantity label\n                                      let amountIndicator = document.createElement(\"h3\")\n                                      let amountIndicatorContent = document.createTextNode(\"Quantity\")\n                                      amountIndicator.appendChild(amountIndicatorContent)\n                                      innerAmountDiv.prepend(amountIndicator)\n\n                                      // create h3 with actual price value\n                                      let amountValue = document.createElement(\"h3\")\n                                      let amountValueContent = document.createTextNode(entryAmount)\n                                      amountValue.appendChild(amountValueContent)\n                                      innerAmountDiv.append(amountValue)\n\n                                  // create div for removing item\n                                  let innerRemoveDiv = document.createElement(\"div\")\n                                  innerRemoveDiv.classList.add(\"faceplate\", \"red\")\n                                  outerRemoveDiv.appendChild(innerRemoveDiv)\n\n                                      // create removal \"button\"\n                                      let itemRemove = document.createElement(\"h3\")\n                                      let itemRemoveContent = document.createTextNode(\"Remove\")\n                                      itemRemove.appendChild(itemRemoveContent)\n                                      innerRemoveDiv.prepend(itemRemove)\n\n                                      let itemRemoveIcon = document.createElement(\"i\")\n                                      itemRemoveIcon.classList.add(\"fas\", \"fa-times\")\n                                      innerRemoveDiv.append(itemRemoveIcon)\n\n\n\n                          // Put the faceplate containing the image, text and arrow into container\n                          container.prepend(faceplate)\n\n                          // Put the container into the cart div for displaying on page\n                          cartDiv.append(container)\n\n                          $(container).click(function() {\n                              // Find droptions-container child of option\n                              let droptionsContainer = $(this).children(\".droptions-container\");\n\n                              // Find the dropdown-container children of sibling options\n                              let siblings = $(this).siblings().children(\".droptions-container\");\n\n                              // give display: visible to slider, done with sliding animation\n                              droptionsContainer.slideToggle(200);\n\n                              siblings.slideUp(200);\n                          })\n\n                          $(\".option .red\").click(function() {\n                              let cartItemTitle = $(this).parent().parent().siblings(\".faceplate\").children(\"h3\").text()\n                              removeCartItem(cartItemTitle)\n                          })\n\n                        }\n\n                        createCartEntry()\n                        setCartBadge()\n                    }\n                }\n            }\n\n            function removeCartItem(insert) {\n\n                // Get cart contents form localStorage, convert to object\n                let cart = localStorage.getItem(\"Cart\")\n                let cartObject = JSON.parse(cart)\n\n                for ( var product = 0; product < cartObject.length; product++ ) {\n                    let individualItem = cartObject[product]\n                    let itemIndex = cartObject.indexOf(individualItem)\n                    \n                    for ( var feature = 0; feature < individualItem.length; feature++) {\n                        let detail = individualItem[feature]\n                        let title = detail[\"Title\"]\n\n                        if (title === insert) {\n                          cartObject.splice(itemIndex, 1)\n                          let cartString = JSON.stringify(cartObject)\n                          localStorage.setItem(\"Cart\", cartString)\n                          fillCart()\n                        }\n                    }\n                }\n                setCartBadge()\n                setCartButton()\n            }\n\n            // Add to cart (using Web Storage API)\n            $(\".add-to-cart-button\").click(function () {\n\n                function getQuantityValue() {\n                    return $(document).find(\".qty\").val()\n                };\n\n                // Get relevant item data\n                let itemTitle = $(this).closest(\".panel\").data(\"title\")\n                let itemPrice = $(this).closest(\".panel\").data(\"price\")\n                let itemImage = $(this).closest(\".panel\").data(\"image\")\n                let itemQuantity = getQuantityValue()\n\n                if (! $(this).hasClass(\"in-cart\")) {\n\n                    // Create Object out of item data\n                    let cartEntry = [{\n                        \"Title\": itemTitle,\n                        \"Price\": itemPrice,\n                        \"Image\": itemImage,\n                        \"Amount\": itemQuantity\n                    }]\n\n                    // Fetch cart from localStorage, convert to object\n                    let cart = localStorage.getItem(\"Cart\")\n                    let cartObject = JSON.parse(cart)\n\n                    cartObject.push(cartEntry)\n\n                    // Convert cart back to string & send back to localStorage\n                    let newCart = JSON.stringify(cartObject)\n                    localStorage.setItem(\"Cart\", newCart)\n\n                    fillCart()\n                    setCartButton()\n                } else if ($(this).hasClass(\"in-cart\")){\n                    removeCartItem(itemTitle)\n                    setCartButton()\n                }\n\n            })\n        });\n    }\n};\n\n</script>\n\n<style>\n@import url(\"https://fonts.googleapis.com/css?family=Raleway|Montserrat\");\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#thing {\n  margin-bottom: 100px;\n}\n\n@media (min-width: 0px) {\n  .carousel-wrapper {\n    width: 80vw;\n    margin: 0 auto;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 0px) {\n  .carousel-wrapper {\n    flex-direction: column;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .carousel-wrapper {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n}\n\n@media (min-width: 0px) {\n  .carousel-container {\n    box-sizing: border-box;\n    width: 100%;\n    height: 500px;\n    margin-bottom: 40px;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .carousel-container {\n    width: 150%;\n    height: 1000px;\n  }\n}\n\n@media (min-width: 0px) {\n  .slick-prev:before,\n  .slick-next:before {\n    color: #333;\n  }\n  .image-container {\n    outline: none;\n  }\n  .image-container img {\n    width: 100%;\n    height: 500px;\n    object-fit: contain;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .image-container {\n    height: 1000px;\n  }\n}\n\n@media (min-width: 0px) {\n  .panel-container {\n    box-sizing: border-box;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .panel-container {\n    width: 30%;\n  }\n}\n\n@media (min-width: 0px) {\n  .panel {\n    z-index: 1;\n    min-width: 350px;\n    max-width: 350px;\n    padding: 0 20px;\n    background: #fff;\n    box-sizing: border-box;\n  }\n  .panel .product-name {\n    color: #333;\n    font-family: \"Raleway\";\n    font-size: 30px;\n    text-transform: uppercase;\n    text-align: center;\n    margin: 40px 0 -20px;\n  }\n  .panel .product-price {\n    color: #333;\n    font-family: \"Montserrat\";\n    font-size: 20px;\n    text-transform: uppercase;\n    text-align: center;\n    margin: 40px 0 -20px;\n  }\n  .colors,\n  .sizes,\n  .quantity,\n  .add-to-cart-container,\n  .social {\n    margin: 70px 0;\n    box-sizing: border-box;\n    display: grid;\n    justify-content: space-between;\n    column-gap: 20px;\n    row-gap: 20px;\n  }\n  .colors {\n    grid-template-columns: 50fr 50fr;\n  }\n  .sizes {\n    grid-template-columns: repeat(4, 20fr);\n  }\n  .colors h3,\n  .sizes h3 {\n    color: #333;\n    font-family: \"Montserrat\";\n    text-align: center;\n    min-width: 302px;\n    min-width: 302px;\n    /* border: solid red; */\n    padding: 0;\n    margin: 0;\n  }\n  .quantity {\n    grid-template-columns: 60px 100px 60px;\n  }\n  .add-to-cart-container {\n    grid-template-columns: 100%;\n  }\n  .button {\n    z-index: 3;\n    position: relative;\n    height: 60px;\n    min-width: 60px;\n    margin: 0;\n    padding: 0;\n    border: none;\n    outline: none;\n    box-sizing: border-box;\n    border-radius: 5px;\n    font-family: \"Raleway\", sans-serif;\n    font-size: 15px;\n    text-transform: uppercase;\n    color: #333;\n    background: #e8e8e8;\n    transition: all 0.2s;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n  }\n  .button.selected {\n    background-color: #333;\n    color: #e8e8e8;\n\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .button:hover {\n    background-color: #333;\n    color: #e8e8e8;\n  }\n}\n\n@media (min-width: 0px) {\n  .qty-button {\n    height: 60px;\n    width: 60px;\n    border: none;\n    outline: none;\n    border-radius: 50%;\n    box-sizing: border-box;\n    font-family: \"Raleway\", sans-serif;\n    text-transform: uppercase;\n    font-size: 40px;\n    line-height: 55px;\n    transition: all 0.1s;\n    background-color: #e8e8e8;\n    color: #333;\n    cursor: pointer;\n  }\n  .qty-button:active {\n    background-color: #333;\n    color: #fff;\n  }\n  .quantity input {\n    font-size: 25px;\n    color: #333;\n    text-align: center;\n    background-color: #fff;\n    border: 3px solid #e8e8e8;\n    border-radius: 5px;\n    padding: 5px 0 0 0;\n    -moz-appearance: textfield;\n  }\n  .button-red {\n    color: #ba6b6c;\n  }\n  .button-red.selected {\n    background: #ef9a9a;\n    color: #fff;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .button-red:hover {\n    background: #ef9a9a;\n    color: #fff;\n  }\n}\n\n@media (min-width: 0px) {\n  .button-green {\n    color: #75a478;\n  }\n  .button-green.selected {\n    background: #75a478;\n    color: #fff;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .button-green:hover {\n    background: #75a478;\n    color: #fff;\n  }\n}\n\n@media (min-width: 0px) {\n  .button-green:active {\n    background: #75a478;\n    color: #fff;\n  }\n  .button-black {\n    color: #333;\n  }\n  .button-black.selected {\n    background: #333;\n    color: #999;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .button-black:hover {\n    background: #333;\n    color: #999;\n  }\n}\n\n@media (min-width: 0px) {\n  .button-black:active {\n    background: #333;\n    color: #999;\n  }\n}\n\n@media (min-width: 0px) and (min-width: 1000px) {\n  .button-fieg:hover {\n    background: #90caf9;\n    color: #fff;\n  }\n}\n\n@media (min-width: 0px) {\n  .button-fieg:active {\n    background: 90caf9;\n    color: #fff;\n  }\n  .description-wrapper {\n    flex: 1;\n    max-width: 100%;\n    margin: 50px 0;\n    padding: 0 12%;\n    text-align: center;\n    color: #444;\n  }\n  .description-wrapper * {\n    margin: 20px 0;\n  }\n  .description-wrapper .description-header h1 {\n    font-family: \"Raleway\", sans-serif;\n    font-size: 200%;\n  }\n  .description-wrapper .description-body p {\n    font-family: \"Montserrat\";\n    font-size: 110%;\n    line-height: 150%;\n  }\n}\n\n@media (min-width: 568px) {\n  .carousel-container {\n    height: 300px;\n  }\n  .image-container img {\n    height: 300px;\n  }\n}\n\n@media (min-width: 750px) {\n  .carousel-container {\n    height: 400px;\n    width: 65%;\n  }\n  .image-container img {\n    height: 400px;\n    width: 100%;\n  }\n}\n\n@media (min-width: 801px) {\n  .carousel-container {\n    height: 70vh;\n    width: 50%;\n  }\n  .image-container img {\n    height: 70vh;\n  }\n}\n\n.slick-slider {\n  position: relative;\n  display: block;\n  box-sizing: border-box;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-touch-callout: none;\n  -khtml-user-select: none;\n  -ms-touch-action: pan-y;\n  touch-action: pan-y;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.slick-list {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  margin: 0;\n  padding: 0;\n}\n\n.slick-list:focus {\n  outline: none;\n}\n\n.slick-list.dragging {\n  cursor: pointer;\n  cursor: hand;\n}\n\n.slick-slider .slick-track,\n.slick-slider .slick-list {\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n}\n\n.slick-track {\n  position: relative;\n  top: 0;\n  left: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.slick-track:before,\n.slick-track:after {\n  display: table;\n  content: \"\";\n}\n\n.slick-track:after {\n  clear: both;\n}\n\n.slick-loading .slick-track {\n  visibility: hidden;\n}\n\n.slick-slide {\n  display: none;\n  float: left;\n  height: 100%;\n  min-height: 1px;\n}\n\n[dir=\"rtl\"] .slick-slide {\n  float: right;\n}\n\n.slick-slide img {\n  display: block;\n}\n\n.slick-slide.slick-loading img {\n  display: none;\n}\n\n.slick-slide.dragging img {\n  pointer-events: none;\n}\n\n.slick-initialized .slick-slide {\n  display: block;\n}\n\n.slick-loading .slick-slide {\n  visibility: hidden;\n}\n\n.slick-vertical .slick-slide {\n  display: block;\n  height: auto;\n  border: 1px solid transparent;\n}\n\n.slick-arrow.slick-hidden {\n  display: none;\n}\n</style>\n"]}]}